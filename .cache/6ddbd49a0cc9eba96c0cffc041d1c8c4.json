{"dependencies":[{"name":"phaser","loc":{"line":1,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _phaser = require(\"phaser\");\n\nvar _phaser2 = _interopRequireDefault(_phaser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Game extends _phaser2.default.Scene {\n  init() {\n    this.aiPaddleVelocity = new _phaser2.default.Math.Vector2(0, 0);\n    this.playerScore = 0;\n    this.aiScore = 0;\n  }\n\n  preload() {}\n\n  create() {\n    this.physics.world.setBounds(-100, 0, 1000, 500);\n    this.ball = this._createBall();\n    this._resetBall();\n    this.playerPaddle = this._createplayerPaddle();\n    this.aiPaddle = this._createAIPaddle();\n    const scoreStyle = {\n      fontSize: 48\n    };\n    this.playerScoreLabel = this.add.text(300, 125, '0', scoreStyle).setOrigin(0.5, 0.5);\n    this.aiScoreLabel = this.add.text(500, 375, '0', scoreStyle).setOrigin(0.5, 0.5);\n    this.cursors = this.input.keyboard.createCursorKeys();\n    this._addColliders();\n  }\n\n  update() {\n    this._handleKeyBoardInput();\n    this._moveAiPaddle();\n    this._handleBallMovement();\n  }\n\n  _createBall() {\n    const ball = this.add.circle(400, 250, 10, 0xfffffff, 1);\n    this.physics.add.existing(ball);\n\n    ball.body.setBounce(1, 1);\n    ball.body.setCollideWorldBounds(true, 1, 1);\n\n    return ball;\n  }\n\n  _createplayerPaddle() {\n    const playerPaddle = this.add.rectangle(50, 250, 30, 100, 0xffffff, 1);\n    this.physics.add.existing(playerPaddle, true);\n    return playerPaddle;\n  }\n\n  _createAIPaddle() {\n    const AIPaddle = this.add.rectangle(750, 250, 30, 100, 0xffffff);\n    this.physics.add.existing(AIPaddle, true);\n    return AIPaddle;\n  }\n\n  _addColliders() {\n    this.physics.add.collider(this.playerPaddle, this.ball);\n    this.physics.add.collider(this.aiPaddle, this.ball);\n  }\n\n  _handleKeyBoardInput() {\n    /** @type {Phaser.Physics.Arcade.StaticBody} */\n    const playerPaddleBody = this.playerPaddle.body;\n\n    if (this.cursors.up.isDown) {\n      this.playerPaddle.y -= 10;\n      playerPaddleBody.updateFromGameObject();\n    } else if (this.cursors.down.isDown) {\n      this.playerPaddle.y += 10;\n      playerPaddleBody.updateFromGameObject();\n    }\n  }\n\n  _moveAiPaddle() {\n    const diff = this.ball.y - this.aiPaddle.y;\n    const aiSpeed = 3;\n    if (Math.abs(diff) < 10) {\n      return;\n    }\n    if (diff < 0) {\n      // ball is above the paddle\n      this.aiPaddleVelocity.y = -aiSpeed;\n      if (this.aiPaddleVelocity.y < -10) {\n        this.aiPaddleVelocity.y = -10;\n      }\n    } else if (diff > 0) {\n      // ball is below the paddle\n      this.aiPaddleVelocity.y = aiSpeed;\n      if (this.aiPaddleVelocity.y < 10) {\n        this.aiPaddleVelocity.y = 10;\n      }\n    }\n    this.aiPaddle.y += this.aiPaddleVelocity.y;\n    this.aiPaddle.body.updateFromGameObject();\n  }\n\n  _handleBallMovement() {\n    if (this.ball.x < -30) {\n      // scored  on the left side\n      this._aiScored();\n      this._resetBall();\n    } else if (this.ball.x > 830) {\n      // scored on the right side\n      this._playerScored();\n      this._resetBall();\n    }\n  }\n\n  _resetBall() {\n    this.ball.setPosition(400, 250);\n    const angle = _phaser2.default.Math.Between(0, 360);\n    const vec = this.physics.velocityFromAngle(angle, 200);\n    this.ball.body.setVelocity(vec.x, vec.y);\n  }\n\n  _playerScored() {\n    this.playerScore += 1;\n    this.playerScoreLabel.text = this.playerScore;\n  }\n\n  _aiScored() {\n    this.aiScore += 1;\n    this.aiScoreLabel.text = this.aiScore;\n  }\n}\nexports.default = Game;"},"hash":"daaecb6deaa12c2102b0578887cacd8c"}